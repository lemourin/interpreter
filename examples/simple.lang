// working piece of code

auto check_ok = [](auto ret, auto target) -> string {
  if ret == target {
    return "OK";
  } else {
    return "FAIL";
  };
};

auto make_array = []() -> auto {
  return [](auto idx) -> auto {
    return 0;
  };
};

auto put_array = [](auto idx, auto value, auto arr) -> auto {
  return [](auto i) -> auto {
    if idx == i {
      return value;
    } else {
      return arr(i);
    };
  };
};

auto modulo = [](int a, int b) -> int {
  return a - b * (a / b);
};

auto int_to_sgn = [](int a) -> string {
  if a == 0 {
    return "0";
  };
  if a == 1 {
    return "1";
  };
  if a == 2 {
    return "2";
  };
  if a == 3 {
    return "3";
  };
  if a == 4 {
    return "4";
  };
  if a == 5 {
    return "5";
  };
  if a == 6 {
    return "6";
  };
  if a == 7 {
    return "7";
  };
  if a == 8 {
    return "8";
  };
  if a == 9 {
    return "9";
  };
};

auto int_to_string = [](int n) -> string {
  string result;
  if n == 0 {
    return "0";
  };
  while n > 0 {
    result = int_to_sgn(modulo(n, 10)) + result;
    n = n / 10;
  };
  return result;
};

auto print_array = [](int cnt, auto arr) -> string {
  int i = 0;
  string result;
  while i < cnt {
    result += (int_to_string(arr(i)) + " ");
    i++;
  };
  return result;
};

auto print_fibs = [](int n) -> string {
  string result;
  auto fib = [](int n) -> int {
    if n <= 2 {
      return n;
    };
    return fib(n - 1) + fib(n - 2);
  };
  int it = 1;
  while it < n {
    result += (int_to_string(fib(it)) + " ");
    it++;
  };
  return result;
};

print check_ok(print_fibs(10), "1 2 3 5 8 13 21 34 55 ");

auto make_incrementer = [](int a) -> auto {
  return [](int n) -> int {
    return a + n;
  };
};

auto apply = [](int n, auto f) -> auto {
  return f(n);
};

print check_ok(42, apply(41, [](int n) -> int {
  return n + 1;
}));

print check_ok(42, apply(40, make_incrementer(2)));

auto factorial = [](int n) -> int {
  if (n == 0) {
    return 1;
  };
  return n * factorial(n - 1);
};

print check_ok(42, make_incrementer(20)(22));
print check_ok(42, [](int a) -> int { return a; }(42));
print check_ok(apply(10, factorial), 3628800);

auto gcd = [](int a, int b) -> int {
  if b == 0 {
    return a;
  } else {
    return gcd(b, (modulo(a, b)));
  };
};

print check_ok(gcd(42 * 17, 42 * 83), 42);

auto sequence = [](int cnt) -> auto {
  auto arr = make_array();
  int it = 0;
  while it < cnt {
    arr = put_array(it, it, arr);
    it++;
  };
  return arr;
};

print check_ok(print_array(10, sequence(10)), "0 1 2 3 4 5 6 7 8 9 ");
