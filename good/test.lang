// should work in the final version

struct data {
  int x;
  int y;
};

auto func = [](int a, int b) -> int {
  int sum = 0;
  for x in range(10) {
    sum += x;
  };
  auto f = [](int a) -> int {
    return 1 + 2;
  };
  return f(sum);
};

auto map = [](array[int] t, function[int -> int] f) -> void {
  for i in range(len(t)) {
    t[i] = f(i);
  };
};

func(1, 3);

array[int] l = [1, 2, 3, 4, 5];
map(l, [](int a) -> int {
  for i in range(10) {
    a = a * a;
  };
  return a + 1;
});

function[int, int -> tuple[int, int, string, int]] add = 
  [](int a, int b) -> tuple[int, tuple[int, int, tuple[string, int]]] {
    return make_tuple(a + b, make_tuple(a, a, make_tuple("test", a)));
  };

auto f = [](int a, int b) -> tuple[int, tuple[int, int, tuple[string, int]]] {
  return make_tuple(a + b, make_tuple(a, a, make_tuple("test", a)));
};

//this should extract the string `test` into the `str` variable
make_tuple(null, make_tuple(null, null, make_tuple(str, null))) = add(1, 5);

int a = 5;
if a == 0 {
  a = 1;
} else {
  if a == 2 {
    a = 2;
  };
};

data.x = a;

while a >= 0 {
  a = a - 1;
};

int num = 1 + 2 - (4 * 6);
print(num);

int value = (a += 5);
value++;

string str = "test";
for c in str {
  print(c);
};
